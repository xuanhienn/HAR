function [dense_1, state] = modelHAR2(conv1d_input, params, varargin)
%MODELHAR2 Function implementing an imported ONNX network.
%
% THIS FILE WAS AUTO-GENERATED BY importONNXFunction.
% ONNX Operator Set Version: 14
%
% Variable names in this function are taken from the original ONNX file.
%
% [DENSE_1] = modelHAR2(CONV1D_INPUT, PARAMS)
%			- Evaluates the imported ONNX network MODELHAR2 with input(s)
%			CONV1D_INPUT and the imported network parameters in PARAMS. Returns
%			network output(s) in DENSE_1.
%
% [DENSE_1, STATE] = modelHAR2(CONV1D_INPUT, PARAMS)
%			- Additionally returns state variables in STATE. When training,
%			use this form and set TRAINING to true.
%
% [__] = modelHAR2(CONV1D_INPUT, PARAMS, 'NAME1', VAL1, 'NAME2', VAL2, ...)
%			- Specifies additional name-value pairs described below:
%
% 'Training'
% 			Boolean indicating whether the network is being evaluated for
%			prediction or training. If TRAINING is true, state variables
%			will be updated.
%
% 'InputDataPermutation'
%			'auto' - Automatically attempt to determine the permutation
%			 between the dimensions of the input data and the dimensions of
%			the ONNX model input. For example, the permutation from HWCN
%			(MATLAB standard) to NCHW (ONNX standard) uses the vector
%			[4 3 1 2]. See the documentation for IMPORTONNXFUNCTION for
%			more information about automatic permutation.
%
%			'none' - Input(s) are passed in the ONNX model format. See 'Inputs'.
%
%			numeric vector - The permutation vector describing the
%			transformation between input data dimensions and the expected
%			ONNX input dimensions.%
%			cell array - If the network has multiple inputs, each cell
%			contains 'auto', 'none', or a numeric vector.
%
% 'OutputDataPermutation'
%			'auto' - Automatically attempt to determine the permutation
%			between the dimensions of the output and a conventional MATLAB
%			dimension ordering. For example, the permutation from NC (ONNX
%			standard) to CN (MATLAB standard) uses the vector [2 1]. See
%			the documentation for IMPORTONNXFUNCTION for more information
%			about automatic permutation.
%
%			'none' - Return output(s) as given by the ONNX model. See 'Outputs'.
%
%			numeric vector - The permutation vector describing the
%			transformation between the ONNX output dimensions and the
%			desired output dimensions.%
%			cell array - If the network has multiple outputs, each cell
%			contains 'auto', 'none' or a numeric vector.
%
% Inputs:
% -------
% CONV1D_INPUT
%			- Input(s) to the ONNX network.
%			  The input size(s) expected by the ONNX file are:
%				  CONV1D_INPUT:		[unk__98, 60, 6]				Type: FLOAT
%			  By default, the function will try to permute the input(s)
%			  into this dimension ordering. If the default is incorrect,
%			  use the 'InputDataPermutation' argument to control the
%			  permutation.
%
%
% PARAMS	- Network parameters returned by 'importONNXFunction'.
%
%
% Outputs:
% --------
% DENSE_1
%			- Output(s) of the ONNX network.
%			  Without permutation, the size(s) of the outputs are:
%				  DENSE_1:		[unk__99, 5]				Type: FLOAT
%			  By default, the function will try to permute the output(s)
%			  from this dimension ordering into a conventional MATLAB
%			  ordering. If the default is incorrect, use the
%			  'OutputDataPermutation' argument to control the permutation.
%
% STATE		- (Optional) State variables. When TRAINING is true, these will
% 			  have been updated from the original values in PARAMS.State.
%
%
%  See also importONNXFunction

% Preprocess the input data and arguments:
[conv1d_input, Training, outputDataPerms, anyDlarrayInputs] = preprocessInput(conv1d_input, params, varargin{:});
% Put all variables into a single struct to implement dynamic scoping:
[Vars, NumDims] = packageVariables(params, {'conv1d_input'}, {conv1d_input}, [3]);
% Call the top-level graph function:
[dense_1, dense_1NumDims, state] = tf2onnxGraph1000(conv1d_input, NumDims.conv1d_input, Vars, NumDims, Training, params.State);
% Postprocess the output data
[dense_1] = postprocessOutput(dense_1, outputDataPerms, anyDlarrayInputs, Training, varargin{:});
end

function [dense_1, dense_1NumDims1007, state] = tf2onnxGraph1000(conv1d_input, conv1d_inputNumDims1006, Vars, NumDims, Training, state)
% Function implementing the graph 'tf2onnxGraph1000'
% Update Vars and NumDims from the graph's formal input parameters. Note that state variables are already in Vars.
Vars.conv1d_input = conv1d_input;
NumDims.conv1d_input = conv1d_inputNumDims1006;

% Execute the operators:
% Unsqueeze:
[shape, NumDims.sequential_conv1d_Conv1D_ExpandDims_0] = prepareUnsqueezeArgs(Vars.conv1d_input, Vars.const_fold_opt__94, NumDims.conv1d_input);
Vars.sequential_conv1d_Conv1D_ExpandDims_0 = reshape(Vars.conv1d_input, shape);

% Transpose:
[perm, NumDims.sequential_conv1d_Conv1D__45_0] = prepareTransposeArgs(Vars.TransposePerm1001, NumDims.sequential_conv1d_Conv1D_ExpandDims_0);
if ~isempty(perm)
    Vars.sequential_conv1d_Conv1D__45_0 = permute(Vars.sequential_conv1d_Conv1D_ExpandDims_0, perm);
end

% Conv:
[weights, bias, stride, dilationFactor, padding, dataFormat, NumDims.sequential_conv1d_Conv1D_0] = prepareConvArgs(Vars.sequential_conv1d_Conv1D_ExpandDims_1_0, '', Vars.ConvStride1002, Vars.ConvDilationFactor1003, Vars.ConvPadding1004, 1, NumDims.sequential_conv1d_Conv1D__45_0, NumDims.sequential_conv1d_Conv1D_ExpandDims_1_0);
Vars.sequential_conv1d_Conv1D_0 = dlconv(Vars.sequential_conv1d_Conv1D__45_0, weights, bias, 'Stride', stride, 'DilationFactor', dilationFactor, 'Padding', padding, 'DataFormat', dataFormat);

% Squeeze:
[Vars.sequential_conv1d_Conv1D_Squeeze_0, NumDims.sequential_conv1d_Conv1D_Squeeze_0] = onnxSqueeze(Vars.sequential_conv1d_Conv1D_0, Vars.axes_const__49__74, NumDims.sequential_conv1d_Conv1D_0);

% Add:
Vars.sequential_conv1d_BiasAdd_0 = Vars.sequential_conv1d_Conv1D_Squeeze_0 + Vars.const_fold_opt__96;
NumDims.sequential_conv1d_BiasAdd_0 = max(NumDims.sequential_conv1d_Conv1D_Squeeze_0, NumDims.const_fold_opt__96);

% Transpose:
[perm, NumDims.sequential_lstm_PartitionedCall_transp_1] = prepareTransposeArgs(Vars.TransposePerm1005, NumDims.sequential_conv1d_BiasAdd_0);
if ~isempty(perm)
    Vars.sequential_lstm_PartitionedCall_transp_1 = permute(Vars.sequential_conv1d_BiasAdd_0, perm);
end

% Shape:
[Vars.Shape__87_0, NumDims.Shape__87_0] = onnxShape(Vars.sequential_conv1d_BiasAdd_0, NumDims.sequential_conv1d_BiasAdd_0);

% Gather:
[Vars.sequential_lstm_Shape_0, NumDims.sequential_lstm_Shape_0] = onnxGather(Vars.Shape__87_0, Vars.Const__89, 0, NumDims.Shape__87_0, NumDims.Const__89);

% Cast:
Vars.sequential_lstm_Shape__50_0 = cast(int32(extractdata(Vars.sequential_lstm_Shape_0)), 'like', Vars.sequential_lstm_Shape_0);
NumDims.sequential_lstm_Shape__50_0 = NumDims.sequential_lstm_Shape_0;

% Slice:
[Indices, NumDims.sequential_lstm_strided_slice_0] = prepareSliceArgs(Vars.sequential_lstm_Shape__50_0, Vars.const_axes__62, Vars.const_axes__33, Vars.const_axes__62, '', NumDims.sequential_lstm_Shape__50_0);
Vars.sequential_lstm_strided_slice_0 = subsref(Vars.sequential_lstm_Shape__50_0, Indices);

% Concat:
[Vars.sequential_lstm_zeros_packed_Concat__66_, NumDims.sequential_lstm_zeros_packed_Concat__66_] = onnxConcat(0, {Vars.sequential_lstm_strided_slice_0, Vars.const_fold_opt__97}, [NumDims.sequential_lstm_strided_slice_0, NumDims.const_fold_opt__97]);

% Cast:
Vars.sequential_lstm_zeros_1__61_0 = cast(int64(extractdata(Vars.sequential_lstm_zeros_packed_Concat__66_)), 'like', Vars.sequential_lstm_zeros_packed_Concat__66_);
NumDims.sequential_lstm_zeros_1__61_0 = NumDims.sequential_lstm_zeros_packed_Concat__66_;

% Expand:
[shape, NumDims.sequential_lstm_zeros_0] = prepareExpandArgs(Vars.sequential_lstm_zeros_1__61_0);
Vars.sequential_lstm_zeros_0 = Vars.sequential_lstm_zeros_Const_0 + zeros(shape);

% Unsqueeze:
[shape, NumDims.Unsqueeze__25_0] = prepareUnsqueezeArgs(Vars.sequential_lstm_zeros_0, Vars.const_axes__62, NumDims.sequential_lstm_zeros_0);
Vars.Unsqueeze__25_0 = reshape(Vars.sequential_lstm_zeros_0, shape);

% LSTM:
[H0, C0, WEIGHTS, RECURRENTWEIGHTS, BIAS, NumDims.LSTM__30_0, NumDims.LSTM__30_1, NumDims.LSTM__30_2] = prepareLSTMArgs(Vars.W0__27, Vars.R0__28, Vars.B0__29, '', Vars.Unsqueeze__25_0, Vars.Unsqueeze__25_0, '');
[Vars.LSTM__30_0, Vars.LSTM__30_1, Vars.LSTM__30_2] = lstm(Vars.sequential_lstm_PartitionedCall_transp_1, H0, C0, WEIGHTS, RECURRENTWEIGHTS, BIAS, 'DataFormat', 'CBT');
[C, B, T] = size(Vars.LSTM__30_0, 1:3);
Vars.LSTM__30_0 = reshape(Vars.LSTM__30_0, [C B 1 T]);

% Squeeze:
[Vars.Squeeze__34_0, NumDims.Squeeze__34_0] = onnxSqueeze(Vars.LSTM__30_0, Vars.const_axes__33, NumDims.LSTM__30_0);

% Slice:
[Indices, NumDims.sequential_lstm_PartitionedCall_stride_1] = prepareSliceArgs(Vars.Squeeze__34_0, Vars.const_starts__68, Vars.const_ends__69, Vars.const_axes__62, '', NumDims.Squeeze__34_0);
Vars.sequential_lstm_PartitionedCall_stride_1 = subsref(Vars.Squeeze__34_0, Indices);

% Squeeze:
[Vars.sequential_lstm_PartitionedCall_stride_3, NumDims.sequential_lstm_PartitionedCall_stride_3] = onnxSqueeze(Vars.sequential_lstm_PartitionedCall_stride_1, Vars.const_axes__62, NumDims.sequential_lstm_PartitionedCall_stride_1);

% MatMul:
[Vars.sequential_dense_MatMul_0, NumDims.sequential_dense_MatMul_0] = onnxMatMul(Vars.sequential_lstm_PartitionedCall_stride_3, Vars.sequential_dense_MatMul_ReadVariableOp_0, NumDims.sequential_lstm_PartitionedCall_stride_3, NumDims.sequential_dense_MatMul_ReadVariableOp_0);

% Add:
Vars.sequential_dense_BiasAdd_0 = Vars.sequential_dense_MatMul_0 + Vars.sequential_dense_BiasAdd_ReadVariableOp_;
NumDims.sequential_dense_BiasAdd_0 = max(NumDims.sequential_dense_MatMul_0, NumDims.sequential_dense_BiasAdd_ReadVariableOp_);

% Relu:
Vars.sequential_dense_Relu_0 = relu(Vars.sequential_dense_BiasAdd_0);
NumDims.sequential_dense_Relu_0 = NumDims.sequential_dense_BiasAdd_0;

% MatMul:
[Vars.sequential_dense_1_MatMul_0, NumDims.sequential_dense_1_MatMul_0] = onnxMatMul(Vars.sequential_dense_Relu_0, Vars.sequential_dense_1_MatMul_ReadVariableOp, NumDims.sequential_dense_Relu_0, NumDims.sequential_dense_1_MatMul_ReadVariableOp);

% Add:
Vars.sequential_dense_1_BiasAdd_0 = Vars.sequential_dense_1_MatMul_0 + Vars.sequential_dense_1_BiasAdd_ReadVariableO;
NumDims.sequential_dense_1_BiasAdd_0 = max(NumDims.sequential_dense_1_MatMul_0, NumDims.sequential_dense_1_BiasAdd_ReadVariableO);

% Softmax:
[Vars.dense_1, NumDims.dense_1] = onnxSoftmax13(Vars.sequential_dense_1_BiasAdd_0, -1, NumDims.sequential_dense_1_BiasAdd_0);

% Set graph output arguments from Vars and NumDims:
dense_1 = Vars.dense_1;
dense_1NumDims1007 = NumDims.dense_1;
% Set output state from Vars:
state = updateStruct(state, Vars);
end

function [inputDataPerms, outputDataPerms, Training] = parseInputs(conv1d_input, numDataOutputs, params, varargin)
% Function to validate inputs to modelHAR2:
p = inputParser;
isValidArrayInput = @(x)isnumeric(x) || isstring(x);
isValidONNXParameters = @(x)isa(x, 'ONNXParameters');
addRequired(p, 'conv1d_input', isValidArrayInput);
addRequired(p, 'params', isValidONNXParameters);
addParameter(p, 'InputDataPermutation', 'auto');
addParameter(p, 'OutputDataPermutation', 'auto');
addParameter(p, 'Training', false);
parse(p, conv1d_input, params, varargin{:});
inputDataPerms = p.Results.InputDataPermutation;
outputDataPerms = p.Results.OutputDataPermutation;
Training = p.Results.Training;
if isnumeric(inputDataPerms)
    inputDataPerms = {inputDataPerms};
end
if isstring(inputDataPerms) && isscalar(inputDataPerms) || ischar(inputDataPerms)
    inputDataPerms = repmat({inputDataPerms},1,1);
end
if isnumeric(outputDataPerms)
    outputDataPerms = {outputDataPerms};
end
if isstring(outputDataPerms) && isscalar(outputDataPerms) || ischar(outputDataPerms)
    outputDataPerms = repmat({outputDataPerms},1,numDataOutputs);
end
end

function [conv1d_input, Training, outputDataPerms, anyDlarrayInputs] = preprocessInput(conv1d_input, params, varargin)
% Parse input arguments
[inputDataPerms, outputDataPerms, Training] = parseInputs(conv1d_input, 1, params, varargin{:});
anyDlarrayInputs = any(cellfun(@(x)isa(x, 'dlarray'), {conv1d_input}));
% Make the input variables into unlabelled dlarrays:
conv1d_input = makeUnlabeledDlarray(conv1d_input);
% Permute inputs if requested:
conv1d_input = permuteInputVar(conv1d_input, inputDataPerms{1}, 3);
% Check input size(s):
checkInputSize(size(conv1d_input), {'unk__98' 60 6}, "conv1d_input");
end

function [dense_1] = postprocessOutput(dense_1, outputDataPerms, anyDlarrayInputs, Training, varargin)
% Set output type:
if ~anyDlarrayInputs && ~Training
    if isdlarray(dense_1)
        dense_1 = extractdata(dense_1);
    end
end
% Permute outputs if requested:
dense_1 = permuteOutputVar(dense_1, outputDataPerms{1}, 2);
end


%% dlarray functions implementing ONNX operators:

function [Y, numDimsY] = onnxConcat(ONNXAxis, XCell, numDimsXArray)
% Concatentation that treats all empties the same. Necessary because
% dlarray.cat does not allow, for example, cat(1, 1x1, 1x0) because the
% second dimension sizes do not match.
numDimsY = numDimsXArray(1);
XCell(cellfun(@isempty, XCell)) = [];
if isempty(XCell)
    Y = dlarray([]);
else
    if ONNXAxis<0
        ONNXAxis = ONNXAxis + numDimsY;
    end
    DLTAxis = numDimsY - ONNXAxis;
    Y = cat(DLTAxis, XCell{:});
end
end

function [Y, numDimsY] = onnxGather(X, ONNXIdx, ONNXAxis, numDimsX, numDimsIdx)
% Function implementing the ONNX Gather operator

% In ONNX, 'Gather' first indexes into dimension ONNXAxis of data, using
% the contents of ONNXIdx as the indices. Then, it reshapes the ONNXAxis
% into the shape of ONNXIdx.
%   Example 1:
% Suppose data has shape [2 3 4 5], ONNXIdx has shape [6 7], and axis=1.
% The result has shape [2 6 7 4 5].
%   Example 2:
% Suppose data has shape [2 3 4 5], ONNXIdx has shape [6], and axis=1.
% The result has shape [2 6 4 5].
%   Example 3:
% Suppose data has shape [2 3 4 5], ONNXIdx has shape [] (a scalar), and axis=1.
% The result has shape [2 4 5].
%
% Since we're using reverse indexing relative to ONNX, in this function
% data and ONNXIdx both have reversed dimension ordering.
numDimsY = numDimsIdx + (numDimsX - 1);
if isempty(X)
    Y = X;
    return;
end
% (1) First, do the subsref part of Gather
if ONNXAxis<0
    ONNXAxis = ONNXAxis + numDimsX;                                 % Axis can be negative. Convert it to its positive equivalent.
end
dltAxis = numDimsX - ONNXAxis;                                      % Convert axis to DLT. ONNXAxis is origin 0 and we index from the end
ONNXIdx(ONNXIdx<0) = ONNXIdx(ONNXIdx<0) + size(X, dltAxis);         % ONNXIdx can have negative components. Make them positive.
dltIdx  = extractdata(ONNXIdx) + 1;                                 % ONNXIdx is origin-0 in ONNX, so add 1 to get dltIdx
% Use subsref to index into data
Indices.subs = repmat({':'}, 1, numDimsX);
Indices.subs{dltAxis} = dltIdx(:);                                  % Index as a column to ensure the output is 1-D in the indexed dimension (for now).
Indices.type = '()';
Y = subsref(X, Indices);
% (2) Now do the reshaping part of Gather
shape = size(Y, 1:numDimsX);
if numDimsIdx == 0
    % Delete the indexed dimension
    shape(dltAxis) = [];
elseif numDimsIdx > 1
    % Reshape the indexed dimension into the shape of ONNXIdx
    shape = [shape(1:dltAxis-1) size(ONNXIdx, 1:numDimsIdx) shape(dltAxis+1:end)];
end
% Extend the shape to 2D so it's valid MATLAB
if numel(shape) < 2
    shape = [shape ones(1,2-numel(shape))];
end
Y = reshape(Y, shape);
end

function [D, numDimsD] = onnxMatMul(A, B, numDimsA, numDimsB)
% Implements the ONNX MatMul operator.

% If either arg is more than 2D, loop over all dimensions before the final
% 2. Inside the loop, perform matrix multiplication.

% If B is 1-D, temporarily extend it to a row vector
if numDimsB==1
    B = B(:)';
end
maxNumDims = max(numDimsA, numDimsB);
numDimsD = maxNumDims;
if maxNumDims > 2
    % sizes of matrices to be multiplied
    matSizeA        = size(A, 1:2);
    matSizeB        = size(B, 1:2);
    % size of the stack of matrices
    stackSizeA      = size(A, 3:maxNumDims);
    stackSizeB      = size(B, 3:maxNumDims);
    % final stack size
    resultStackSize = max(stackSizeA, stackSizeB);
    % full implicitly-expanded sizes
    fullSizeA       = [matSizeA resultStackSize];
    fullSizeB       = [matSizeB resultStackSize];
    resultSize      = [matSizeB(1) matSizeA(2) resultStackSize];
    % Repmat A and B up to the full stack size using implicit expansion
    A = A + zeros(fullSizeA);
    B = B + zeros(fullSizeB);
    % Reshape A and B to flatten the stack dims (all dims after the first 2)
    A2 = reshape(A, size(A,1), size(A,2), []);
    B2 = reshape(B, size(B,1), size(B,2), []);
    % Iterate down the stack dim, doing the 2d matrix multiplications
    D2 = zeros([matSizeB(1), matSizeA(2), size(A2,3)], 'like', A);
    for i = size(A2,3):-1:1
        D2(:,:,i) = B2(:,:,i) * A2(:,:,i);
    end
    % Reshape D2 to the result size (unflatten the stack dims)
    D = reshape(D2, resultSize);
else
    D = B * A;
    if numDimsA==1 || numDimsB==1
        D = D(:);
        numDimsD = 1;
    end
end
end

function [Y, numDimsY] = onnxShape(X, numDimsX)
% Implements the ONNX Shape operator
% Return the reverse ONNX shape as a 1D column vector
switch numDimsX
    case 0
        if isempty(X)
            Y = dlarray(0);
        else
            Y = dlarray(1);
        end
    case 1
        if isempty(X)
            Y = dlarray(0);
        else
            Y = dlarray(size(X,1));
        end
    otherwise
        Y = dlarray(fliplr(size(X, 1:numDimsX))');
end
numDimsY = 1;
end

function [Y, numDimsY] = onnxSoftmax13(X, ONNXaxis, numDimsX)
% Implements the ONNX Softmax function:
% Softmax(input, axis) = Exp(input) / ReduceSum(Exp(input), axis=axis, keepdims=1)
% The input is constrained to floating point types.

if ONNXaxis < 0
    ONNXaxis = ONNXaxis + numDimsX;
end
DLTaxis = numDimsX - ONNXaxis;

X = X - max(X, [], DLTaxis); % Subtract max(X) for numerical stability
expX = exp(X);
dims = prepareReduceArgs(ONNXaxis, numDimsX);
Y = expX ./ sum(expX, dims);
numDimsY = numDimsX;

end
function [Y, numDimsY] = onnxSqueeze(X, ONNXAxes, numDimsX)
% Implements the ONNX Squeeze operator
if numDimsX == 0
    Y = X;
    numDimsY = numDimsX;
else
    % Find the new ONNX shape
    curOShape = size(X, numDimsX:-1:1);
    if isempty(ONNXAxes)
        newOShape = curOShape(curOShape ~= 1);
    else
        ONNXAxes(ONNXAxes<0) = ONNXAxes(ONNXAxes<0) + numDimsX;
        newOShape = curOShape;
        newOShape(ONNXAxes+1) = [];
    end
    % Get numDimsY from ONNX shape
    numDimsY  = numel(newOShape);
    newMShape = [fliplr(newOShape) ones(1, 2-numDimsY)];    % Append 1's to shape if numDims<2
    Y         = reshape(X, newMShape);
end
end

function [weights, bias, stride, dilationFactor, padding, dataFormat, numDimsY] = prepareConvArgs(...
    weights, bias, stride, dilationFactor, padding, numWtGroups, numDimsX, numDimsW)
% Prepares arguments for implementing the ONNX Conv operator

% Weights: The ONNX weight dim is Fcxyz..., where c=C/G, G is numGroups,
% and xyz... are spatial dimensions. DLT "weights" here is the flip of
% that, or ...zyxcF. dlconv requires ...zyxcfG, where f=F/G. So reshape to
% split the last dimension.
sizeW    = size(weights, 1:numDimsW);
F        = sizeW(end);
newWSize = [sizeW(1:numDimsW-1), F/numWtGroups, numWtGroups];
weights  = reshape(weights, newWSize);
% bias
if isempty(bias)
    bias = 0;
end
bias = dlarray(bias(:),'CU');
% Derive missing default attributes from weight tensor
numSpatialDims = numDimsW-2;
if isempty(padding)
    padding = zeros(1, 2*numSpatialDims);
end
if isempty(stride)
    stride = ones(1,numSpatialDims);
end
if isempty(dilationFactor)
    dilationFactor = ones(1,numSpatialDims);
end
% Make the attributes non-dlarrays:
if isa(stride, 'dlarray')
    stride = extractdata(stride);
end
if isa(dilationFactor, 'dlarray')
    dilationFactor = extractdata(dilationFactor);
end
if isa(padding, 'dlarray')
    padding = extractdata(padding);
end
% Make the attributes double row vectors, and flip their dimension ordering
% to reverse-onnx:
stride = fliplr(double(stride(:)'));
dilationFactor = fliplr(double(dilationFactor(:)'));
if isnumeric(padding)       % padding can be "same"
    % ONNX: [x1_begin, ..., xn_begin, x1_end, ...,xn_end]
    % DLT:  [xn_begin, ..., x1_begin;
    %        xn_end, ..., x1_end]       (Note the lrflip and semicolon)
    padding = fliplr(transpose(reshape(padding, [], 2)));
end
% Set dataformat and numdims
dataFormat = [repmat('S', 1, numDimsX-2) 'CB'];
numDimsY = numDimsX;
end

function [shape, numDimsY] = prepareExpandArgs(ONNXShape)
% Prepares arguments for implementing the ONNX Expand operator

% Broadcast X to ONNXShape. The shape of X must be compatible with ONNXShape.
ONNXShape = extractdata(ONNXShape);
shape = fliplr(ONNXShape(:)');
if numel(shape) < 2
    shape = [shape ones(1, 2-numel(shape))];
end
numDimsY = numel(ONNXShape);
end

function [H0, C0, WEIGHTS, RECURRENTWEIGHTS, BIAS, numDimsY, numDimsH, numDimsC] = prepareLSTMArgs(W, R, B, sequence_lens, initial_h, initial_c, P)
% Prepares arguments for implementing the ONNX LSTM operator, forward mode
% only.

% All input tensors have reverse-ONNX dimension ordering.
% W has shape [input_size, 4*hidden_size, num_directions], with num_directions=1.
[input_size, hidden_size4, num_directions] = size(W);
hidden_size = hidden_size4/4;
% initial_h shape is [hidden_size, batch_size, num_directions]
% H0 should have shape [hidden_size, batch_size]
if isempty(initial_h)
    H0 = dlarray(zeros(hidden_size, 1, num_directions));
else
    H0 = initial_h;
end
% initial_c shape is [hidden_size, batch_size, num_directions]
% C0 should have shape [hidden_size, batch_size]
if isempty(initial_c)
    C0 = dlarray(zeros(hidden_size, 1, num_directions));
else
    C0 = initial_c;
end
% W has shape [input_size, 4*hidden_size, num_directions]. ONNX order is
% Input-Output-Forget-Cell (x2 if bidirectional). WEIGHTS must be a matrix
% of size 4*NumHiddenUnits-by-InputSize. MATLAB order is
% Input-Forget-Cell-Output (x2 if bidirectional).
iofcRows = reshape(1:4*hidden_size, [], 4);                      % Columns of this correspond to ONNX's iofc ordering.
ifcoRows = iofcRows(:, [1 3 4 2]);                               % Columns of this correspond to DLT's ifco ordering.
ifcoInd  = ifcoRows(:);                                          % A column vector containing DLT's ifco ordering.
WEIGHTS  = permute(W, [2 1 3]);                                 % WEIGHTS is [4*hidden_size, inputSize].
WEIGHTS  = WEIGHTS(ifcoInd, :);                                 % Rows of WEIGHTS are now in DLT's required ifco order.
% R has shape [hidden_size, 4*hidden_size, num_directions].
% RECURRENTWEIGHTS must be a matrix of size
% 4*NumHiddenUnits-by-NumHiddenUnits. Need to convert iofc to ifco as we
% did for WEIGHTS.
RECURRENTWEIGHTS  = permute(R, [2 1 3]);                        % RECURRENTWEIGHTS is [4*hidden_size, inputSize].
RECURRENTWEIGHTS  = RECURRENTWEIGHTS(ifcoInd, :);               % Rows of RECURRENTWEIGHTS are now in DLT's required ifco order.
% B has shape [8*hidden_size, num_directions]
% ONNX order is Input-Output-Forget-Cell (x2 if bidirectional)
% MATLAB order is Input-Forget-Cell-Output (x2 if bidirectional)
if isempty(B)
    BIAS = dlarray(zeros(4*hidden_size, num_directions));
else
    % B in ONNX is [1, 8*hidden_size], where the first half are the
    % forward biases and the second half are the recurrent biases.
    % In MATLAB these biases are combined.
    BIAS = B(1:4*hidden_size) + B(4*hidden_size+1:end);	% Combine forward and recurrent biases.
    BIAS = BIAS(ifcoInd);                               % Convert to DLT's required ifco order.
end
% X shape is [input_size, batch_size, seq_length]. Y will have the same
% dimension ordering as X. That means 'CBT'
% Label the input tensors
H0               = dlarray(stripdims(H0), 'CB');
C0               = dlarray(stripdims(C0), 'CB');
WEIGHTS          = dlarray(stripdims(WEIGHTS), 'CU');
RECURRENTWEIGHTS = dlarray(stripdims(RECURRENTWEIGHTS), 'CU');
BIAS             = dlarray(stripdims(BIAS(:)), 'C');
numDimsY = 4;
numDimsH = 3;
numDimsC = 3;
end

function dims = prepareReduceArgs(ONNXAxes, numDimsX)
% Prepares arguments for implementing the ONNX Reduce operator
if isempty(ONNXAxes)
    ONNXAxes = 0:numDimsX-1;   % All axes
end
ONNXAxes(ONNXAxes<0) = ONNXAxes(ONNXAxes<0) + numDimsX;
dims = numDimsX - ONNXAxes;
end

function [S, numDimsY] = prepareSliceArgs(X, Starts, Ends, Axes, Steps, numDimsX)
% Prepares arguments for implementing the ONNX Slice operator

% Starts, Ends and Axes are all origin 0. Axes refer to the ONNX dimension
% ordering, but X uses the reverse, DLT ordering. Starts, Ends, Axes, and
% Steps correspond positionally. Axes and Steps may be omitted, with
% defaults described in the ONNX spec.

% Set default Axes and Steps if not supplied
if isempty(Axes)
    Axes = 0:numDimsX-1;   % All axes
end
Axes(Axes<0) = Axes(Axes<0) + numDimsX; % Handle negative Axes.
if isempty(Steps)
    Steps = ones(1, numel(Starts));
end
% Init all dims to :
S.subs = repmat({':'}, 1, numDimsX);
S.type = '()';
% Set Starts and Ends for each axis
for i = 1:numel(Axes)
    DLTDim = numDimsX - Axes(i);                                               % The DLT dim is the reverse of the ONNX dim.
    % "If a negative value is passed for any of the start or end indices,
    % it represents number of elements before the end of that dimension."
    if Starts(i) < 0
        Starts(i) = size(X,DLTDim) + Starts(i);
    end
    if Ends(i) < 0
        Ends(i) = max(-1, size(X,DLTDim) + Ends(i));                        % The -1 case is when we're slicing backward and want to include 0.
    end
    % "If the value passed to start or end is larger than the n (the number
    % of elements in this dimension), it represents n."
    if Starts(i) > size(X,DLTDim)
        Starts(i) = size(X,DLTDim);
    end
    if Ends(i) > size(X,DLTDim)
        Ends(i) = size(X,DLTDim);
    end
    if Steps(i) > 0
        S.subs{DLTDim} = 1 + (Starts(i) : Steps(i) : Ends(i)-1);            % 1 + (Origin 0 indexing with end index excluded)
    else
        S.subs{DLTDim} = 1 + (Starts(i) : Steps(i) : Ends(i)+1);            % 1 + (Origin 0 indexing with end index excluded)
    end
end
numDimsY = numDimsX;
end

function [perm, numDimsA] = prepareTransposeArgs(ONNXPerm, numDimsA)
% Prepares arguments for implementing the ONNX Transpose operator
if numDimsA <= 1        % Tensors of numDims 0 or 1 are unchanged by ONNX Transpose.
    perm = [];
else
    if isempty(ONNXPerm)        % Empty ONNXPerm means reverse the dimensions.
        perm = numDimsA:-1:1;
    else
        perm = numDimsA-flip(ONNXPerm);
    end
end
end

function [newShape, numDimsY] = prepareUnsqueezeArgs(X, ONNXAxes, numDimsX)
% Prepares arguments for implementing the ONNX Unsqueeze operator
numDimsY = numDimsX + numel(ONNXAxes);
ONNXAxes = extractdata(ONNXAxes);
ONNXAxes(ONNXAxes<0) = ONNXAxes(ONNXAxes<0) + numDimsY;
ONNXAxes = sort(ONNXAxes);                                              % increasing order
if numDimsY == 1
    newShape = size(X);
else
    DLTAxes  = flip(numDimsY - ONNXAxes);                                  % increasing order
    newShape = ones(1, numDimsY);
    posToSet = setdiff(1:numDimsY, DLTAxes, 'stable');
    newShape(posToSet) = size(X, 1:numel(posToSet));
end
end

%% Utility functions:

function s = appendStructs(varargin)
% s = appendStructs(s1, s2,...). Assign all fields in s1, s2,... into s.
if isempty(varargin)
    s = struct;
else
    s = varargin{1};
    for i = 2:numel(varargin)
        fromstr = varargin{i};
        fs = fieldnames(fromstr);
        for j = 1:numel(fs)
            s.(fs{j}) = fromstr.(fs{j});
        end
    end
end
end

function checkInputSize(inputShape, expectedShape, inputName)

if numel(expectedShape)==0
    % The input is a scalar
    if ~isequal(inputShape, [1 1])
        inputSizeStr = makeSizeString(inputShape);
        error(message('nnet_cnn_onnx:onnx:InputNeedsResize',inputName, "[1,1]", inputSizeStr));
    end
elseif numel(expectedShape)==1
    % The input is a vector
    if ~shapeIsColumnVector(inputShape) || ~iSizesMatch({inputShape(1)}, expectedShape)
        expectedShape{2} = 1;
        expectedSizeStr = makeSizeString(expectedShape);
        inputSizeStr = makeSizeString(inputShape);
        error(message('nnet_cnn_onnx:onnx:InputNeedsResize',inputName, expectedSizeStr, inputSizeStr));
    end
else
    % The input has 2 dimensions or more
    
    % The input dimensions have been reversed; flip them back to compare to the
    % expected ONNX shape.
    inputShape = fliplr(inputShape);
    
    % If the expected shape has fewer dims than the input shape, error.
    if numel(expectedShape) < numel(inputShape)
        expectedSizeStr = strjoin(["[", strjoin(string(expectedShape), ","), "]"], "");
        error(message('nnet_cnn_onnx:onnx:InputHasGreaterNDims', inputName, expectedSizeStr));
    end
    
    % Prepad the input shape with trailing ones up to the number of elements in
    % expectedShape
    inputShape = num2cell([ones(1, numel(expectedShape) - length(inputShape)) inputShape]);
    
    % Find the number of variable size dimensions in the expected shape
    numVariableInputs = sum(cellfun(@(x) isa(x, 'char') || isa(x, 'string'), expectedShape));
    
    % Find the number of input dimensions that are not in the expected shape
    % and cannot be represented by a variable dimension
    nonMatchingInputDims = setdiff(string(inputShape), string(expectedShape));
    numNonMatchingInputDims  = numel(nonMatchingInputDims) - numVariableInputs;
    
    expectedSizeStr = makeSizeString(expectedShape);
    inputSizeStr = makeSizeString(inputShape);
    if numNonMatchingInputDims == 0 && ~iSizesMatch(inputShape, expectedShape)
        % The actual and expected input dimensions match, but in
        % a different order. The input needs to be permuted.
        error(message('nnet_cnn_onnx:onnx:InputNeedsPermute',inputName, expectedSizeStr, inputSizeStr));
    elseif numNonMatchingInputDims > 0
        % The actual and expected input sizes do not match.
        error(message('nnet_cnn_onnx:onnx:InputNeedsResize',inputName, expectedSizeStr, inputSizeStr));
    end
end
end

function doesMatch = iSizesMatch(inputShape, expectedShape)
% Check whether the input and expected shapes match, in order.
% Size elements match if (1) the elements are equal, or (2) the expected
% size element is a variable (represented by a character vector or string)
doesMatch = true;
for i=1:numel(inputShape)
    if ~(isequal(inputShape{i},expectedShape{i}) || ischar(expectedShape{i}) || isstring(expectedShape{i}))
        doesMatch = false;
        return
    end
end
end

function sizeStr = makeSizeString(shape)
sizeStr = strjoin(["[", strjoin(string(shape), ","), "]"], "");
end

function isVec = shapeIsColumnVector(shape)
if numel(shape) == 2 && shape(2) == 1
    isVec = true;
else
    isVec = false;
end
end
function X = makeUnlabeledDlarray(X)
% Make numeric X into an unlabelled dlarray
if isa(X, 'dlarray')
    X = stripdims(X);
elseif isnumeric(X)
    if isinteger(X)
        % Make ints double so they can combine with anything without
        % reducing precision
        X = double(X);
    end
    X = dlarray(X);
end
end

function [Vars, NumDims] = packageVariables(params, inputNames, inputValues, inputNumDims)
% inputNames, inputValues are cell arrays. inputRanks is a numeric vector.
Vars = appendStructs(params.Learnables, params.Nonlearnables, params.State);
NumDims = params.NumDimensions;
% Add graph inputs
for i = 1:numel(inputNames)
    Vars.(inputNames{i}) = inputValues{i};
    NumDims.(inputNames{i}) = inputNumDims(i);
end
end

function X = permuteInputVar(X, userDataPerm, onnxNDims)
% Returns reverse-ONNX ordering
if onnxNDims == 0
    return;
elseif onnxNDims == 1 && isvector(X)
    X = X(:);
    return;
elseif isnumeric(userDataPerm)
    % Permute into reverse ONNX ordering
    if numel(userDataPerm) ~= onnxNDims
        error(message('nnet_cnn_onnx:onnx:InputPermutationSize', numel(userDataPerm), onnxNDims));
    end
    perm = fliplr(userDataPerm);
elseif isequal(userDataPerm, 'auto') && onnxNDims == 4
    % Permute MATLAB HWCN to reverse onnx (WHCN)
    perm = [2 1 3 4];
elseif isequal(userDataPerm, 'as-is')
    % Do not permute the input
    perm = 1:ndims(X);
else
    % userDataPerm is either 'none' or 'auto' with no default, which means
    % it's already in onnx ordering, so just make it reverse onnx
    perm = max(2,onnxNDims):-1:1;
end
X = permute(X, perm);
end

function Y = permuteOutputVar(Y, userDataPerm, onnxNDims)
switch onnxNDims
    case 0
        perm = [];
    case 1
        if isnumeric(userDataPerm)
            % Use the user's permutation because Y is a column vector which
            % already matches ONNX.
            perm = userDataPerm;
        elseif isequal(userDataPerm, 'auto')
            % Treat the 1D onnx vector as a 2D column and transpose it
            perm = [2 1];
        else
            % userDataPerm is 'none'. Leave Y alone because it already
            % matches onnx.
            perm = [];
        end
    otherwise
        % ndims >= 2
        if isnumeric(userDataPerm)
            % Use the inverse of the user's permutation. This is not just the
            % flip of the permutation vector.
            perm = onnxNDims + 1 - userDataPerm;
        elseif isequal(userDataPerm, 'auto')
            if onnxNDims == 2
                % Permute reverse ONNX CN to DLT CN (do nothing)
                perm = [];
            elseif onnxNDims == 4
                % Permute reverse onnx (WHCN) to MATLAB HWCN
                perm = [2 1 3 4];
            else
                % User wants the output in ONNX ordering, so just reverse it from
                % reverse onnx
                perm = onnxNDims:-1:1;
            end
        elseif isequal(userDataPerm, 'as-is')
            % Do not permute the input
            perm = 1:ndims(Y);
        else
            % userDataPerm is 'none', so just make it reverse onnx
            perm = onnxNDims:-1:1;
        end
end
if ~isempty(perm)
    Y = permute(Y, perm);
end
end

function s = updateStruct(s, t)
% Set all existing fields in s from fields in t, ignoring extra fields in t.
for name = transpose(fieldnames(s))
    s.(name{1}) = t.(name{1});
end
end
